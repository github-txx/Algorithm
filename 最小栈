/**
* 设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

* push(x) -- 将元素 x 推入栈中。
* pop() -- 删除栈顶的元素。
* top() -- 获取栈顶元素。
* getMin() -- 检索栈中的最小元素。
**/

class MinStack {
    
    private Stack<Integer> data;
    
    private Stack<Integer> helper;

    /** initialize your data structure here. */
    public MinStack() {
        data = new Stack<Integer>();
        helper = new Stack<Integer>();
    }
    
    public void push(int x) {
        data.push(x);
        if(helper.isEmpty() || helper.peek()>=x){
            helper.push(x);
        }
    }
    
    public void pop() {
        if(!data.isEmpty()){
            int temp = data.pop();
            if(temp == helper.peek()){
                helper.pop();
            }
        }
    }
    
    public int top() {
        if(data.isEmpty()){
            throw new RuntimeException("栈中元素为空！");
        }
        return data.peek();
    }
    
    public int getMin() {
        if(helper.isEmpty()){
            throw new RuntimeException("栈中元素为空！");
        }
        return helper.peek();
    }
}
